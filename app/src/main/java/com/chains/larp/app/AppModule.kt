package com.chains.larp.app

import com.chains.larp.app.store.AppStore
import com.chains.larp.domain.character.CharacterSaga
import com.chains.larp.domain.character.CharacterController
import com.chains.larp.domain.character.CharacterControllerImpl
import com.minikorp.duo.LoggerMiddleware
import com.minikorp.duo.Store
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import org.kodein.di.DI
import org.kodein.di.bind
import org.kodein.di.instance
import org.kodein.di.singleton

/**
 * App module for [DI].
 */
object AppModule {
    @Suppress("UndocumentedPublicFunction")
    fun create() = DI.Module("AppModule") {
        bind<CharacterController>() with singleton { CharacterControllerImpl(instance()) }

        bind<AppStore>() with singleton {
            Store(
                initialState = AppState(),
                storeScope = CoroutineScope(Dispatchers.Main.immediate),
                //This actionHandler is autogenerated, build the project if it doesnt compile
                actionHandler = createAppStateActionHandler(
                    character = CharacterSaga(di)
                )
            ).apply { addMiddleware(LoggerMiddleware()) }
        }
    }
}