package com.chains.larp.app

import com.chains.larp.app.store.AppStore
import com.chains.larp.domain.auth.AuthController
import com.chains.larp.domain.auth.AuthControllerImpl
import com.chains.larp.domain.auth.AuthReducer
import com.chains.larp.domain.auth.AuthSaga
import com.chains.larp.domain.nfc.CharacterController
import com.chains.larp.domain.nfc.CharacterControllerImpl
import com.chains.larp.domain.nfc.CharacterSaga
import com.minikorp.duo.LoggerMiddleware
import com.minikorp.duo.Store
import com.minikorp.duo.plus
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import org.kodein.di.DI
import org.kodein.di.bind
import org.kodein.di.instance
import org.kodein.di.singleton

/**
 * App module for [DI].
 */
object AppModule {
    @Suppress("UndocumentedPublicFunction")
    fun create() = DI.Module("AppModule") {
        bind<AuthController>() with singleton { AuthControllerImpl(instance()) }
        bind<CharacterController>() with singleton { CharacterControllerImpl(instance()) }

        bind<AppStore>() with singleton {
            Store(
                initialState = AppState(),
                storeScope = CoroutineScope(Dispatchers.Main.immediate),
                //This actionHandler is autogenerated, build the project if it doesnt compile
                actionHandler = createAppStateActionHandler(
                    auth = AuthReducer() + AuthSaga(di),
                    character = CharacterSaga(di)
                )
            ).apply { addMiddleware(LoggerMiddleware()) }
        }
    }
}