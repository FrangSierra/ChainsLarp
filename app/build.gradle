apply plugin: "com.android.application"

apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"

apply plugin: "io.fabric"

apply plugin: "de.mannodermaus.android-junit5"

apply plugin: "androidx.navigation.safeargs.kotlin"

apply from: "$rootDir/gradle/misc.gradle"

ext {
    /*
     ********************
     *
     * Android variables
     *
     ********************
     */
    compile_sdk_version = 29
    min_sdk_version = 21
    target_sdk_version = 29
    build_tools_version = "29.0.1"

    /*
    *******************
    *
    * Library versions
    *
    *******************
    */
    kotlin_coroutines_version = "1.3.5"
    kodein_version = "6.5.5"
    lifecycle_version = "2.2.0"
    navigation_version = "2.3.0"
    crashlytics_version = "2.10.1"
    retrofit_version = "2.9.0"
    okhttp_version = "4.7.2"

    espresso_version = "3.2.0"
    spek_version = "1.2.1"
    junit_jupiter_version = "5.4.0"
}

def keystoreProperties = loadPropertiesFile("keystore.properties")

android {
    compileSdkVersion compile_sdk_version
    buildToolsVersion build_tools_version
    defaultConfig {
        applicationId "com.chainslarp.app"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        /*
         * Debug signing configuration
         *
         * Used to ensure that all developers use the same debug keystore
         */
        debug {
            //storeFile file("$rootDir/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        /*
         * Local release signing configuration
         *
         * Use this if you need to assemble a release version but you don"t have the proper release keys
         */
        localRelease {
            storeFile file("${System.getProperty("user.home")}/.android/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    // Declare one dimension: env -> environments
    flavorDimensions "env"

    productFlavors {
        // Staging environment: environment where the developers can work and add the latest changes to the codebase.
        staging {
            dimension "env"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
        }

        // Production environment: environment that final users will interact with.
        production {
            dimension "env"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            resValue "string", "AIRTABLE_API_KEY", "\"${keystoreProperties["AirtableApiKey"]}\""
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false //TODO enable it after adding suitable logic
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            resValue "string", "AIRTABLE_API_KEY", "\"${keystoreProperties["AirtableApiKey"]}\""
            signingConfig signingConfigs.localRelease
        }
    }

    sourceSets.all {
        java.srcDirs += "src/${name}/kotlin"
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi",
                "-XXLanguage:+InlineClasses",
                "-Xallow-result-return-type",
                "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
    }

    testOptions {
        junitPlatform {
            filters {
                includeEngines {
                    include "spek"
                }
            }
        }
    }
}

dependencies {
    // Kotlin and coroutines
    implementation group: "org.jetbrains.kotlin", name: "kotlin-reflect", version:"$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation 'pl.bclogic:pulsator4droid:1.0.3'

    // Dependency injection: Kodein
    implementation "org.kodein.di:kodein-di-generic-jvm:$kodein_version"
    implementation "org.kodein.di:kodein-di-framework-android-x:$kodein_version"
    implementation "org.kodein.di:kodein-di-conf-jvm:$kodein_version"

    //Mini
    def mini_version = "5.0.4"
    implementation "com.github.minikorp.mini:mini-common:$mini_version"
    implementation "com.github.minikorp.mini:mini-android:$mini_version"
    implementation "com.github.minikorp.mini:mini-rx:$mini_version"
    implementation "com.github.minikorp.mini:mini-flow:$mini_version"
    kapt "com.github.minikorp.mini:mini-processor:$mini_version"
    implementation "com.github.minikorp:grove:1.0.3"

    // Android support core and architecture libs
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.core:core-ktx:1.3.0"
    implementation "androidx.annotation:annotation:1.1.0"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Retrofit
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:retrofit-mock:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    // Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.10.0'

    // Android UI libs
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "com.google.android.material:material:1.1.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.cardview:cardview:1.0.0"


    // Crashlytics
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlytics_version"

    // Firebase
    implementation "com.google.firebase:firebase-analytics:17.4.4"
    implementation "com.google.firebase:firebase-auth:19.3.2"
    implementation "com.google.firebase:firebase-firestore:21.5.0"
    implementation "com.google.firebase:firebase-messaging:20.2.3"

    // Add the dependencies on spek & its required co-dependencies to the test scope
    testImplementation("org.jetbrains.spek:spek-api:$spek_version") {
        exclude group: "org.jetbrains.kotlin"
    }
    testImplementation("org.jetbrains.spek:spek-junit-platform-engine:$spek_version") {
        exclude group: "org.junit.platform"
        exclude group: "org.jetbrains.kotlin"
    }
    testImplementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version") {
        force = true //To avoid conflicts in testing libs
    }
    testImplementation "org.mockito:mockito-core:3.3.3"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"

    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "com.agoda.kakao:kakao:2.3.2"
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: "androidx.annotation", module: "annotation"
    })
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espresso_version"

    androidTestImplementation "androidx.test.uiautomator:uiautomator:2.2.0"

    //Using jUnit5 in unit tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
}

/**
 * Google Services
 */
apply plugin: "com.google.gms.google-services"
